openapi: 3.0.3

info:
  title: Ebay Killer App 1.0
  description: |
    This is a project made for the Web Applications course, with the intention of creating an Ebay killer app.
    
    Authors are Luís Ferreirinha (51127) and Nélio Pereira (60550), of Group 30.
  
  termsOfService: http://ebaykiller.com/terms/
  
  contact:
      name:
        Ebay Killer App Support
      email: 
        ebaykiller@mail.com
  
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

servers:
  - url: https://ebaykiller.com/api/v3

tags:
  - name: User Management
    description: Manage user account and details
  - name: Authentication Service
    description: Authenticate users and reset password
  - name: Payment Service
    description: Process payments
  - name: Notification Service
    description: Send notifications to a user
  - name: Auction Service
    description: Manage auctions
  - name: Item Management
    description: Manage items avaible for auction
  - name: Search Service
    description: Peform searches according to user queries and return results
  - name: Analytics Service
    description: Calculate analytics based on user info
  - name: Recommendation Service
    description: Perform recommendations based on user info
  - name: Shipping Service
    description: Manage shipping orders for items sold in auctions


paths:
  /users:
      description: Manage Users
      get:
        tags:
          - User Management
        description: Retrieve a list with all the users
        operationId: getAllUsers
        responses:
          '200':
            description: Success Response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/definitions/User'
          '400':
              description: Something went found
          '404':
              description: No users found
      post:
        tags:
          - User Management
        description: Create a new user
        operationId: createNewUser
        parameters:
          - name: userID
            in: body
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        responses:
          '201':
            description: User successfully created!
          '400':
            description: Something went wrong, please try again.
  /users/{userid}:
    description: Get user based on path parameter
    get:
      tags:
        - User Management
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        '404':
          description: Couldn't find userID
    put:
      tags:
        - User Management
      description: Update user's details
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/User'
      responses:
        '200':
          description: User details updated successfully!
        '404':
          description: Error! User not found!
        '400':
          description: Something went wrong
    delete:
      tags:
        - User Management
      description: Delete a user specified by the Id
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User successfully deleted!
        '404':
          description: User not found!
        '400':
          description: Something went wrong :(
  /auth/login:
    post:
      tags:
        - Authentication Service
      description: Authenticate the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Credentials'
      responses:
        '200':
          description: Successfully logged in!
        '400':
          description: Authentication failed!
        '404':
          description: No user with that id!
  /auth/logout:
    post:
      tags:
        - Authentication Service
      description: Logout the user
      parameters:
        - name: userID
          in: body
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Logged out successfully!
        '400':
          description: Logout failed.
        '404':
          description: Couldn't logout that user!
  /auth/resetpassword:
    post:
      tags:
        - Authentication Service
      description: Reset a user's password by sending a password reset link to the user's e-mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Credentials'
      responses:
        '200':
          description: Password reset e-mail sent!
        '404':
          description: Invalid e-mail address provided!
        '400':
          description: Something bad happened!
  /payment/auction/{id}:
    put:
      tags:
        - Payment Service
      description: Submit payment for a specific auction.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 140
      requestBody:
        description: Payment details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/PaymentDetails' 
      responses:
        '200':
          description: Payment submitted successfully.
        '400':
          description: Invalid input.
        '404':
          description: Auction not found.
  /payment/{id}:
    get:
      tags:
        - Payment Service
      description: Retrieve the details of a payment by payment id.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $red: '#/definitions/PaymentDetails'
        '404':
          description: Payment not found.
        '400':
          description: Something went wrong.
  /payments:
    get:
      tags: 
        - Payment Service
      description: Retrieve a list of all payments.
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/PaymentDetails'
  /notifications/{userid}:
    put:
      description: Send a notification to a user.
      tags:
        - Notification Service
      parameters:
        - in: path
          name: userid
          required: true
          description: The ID of the user to send the notification to.
          schema:
            type: integer
            format: int64
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Notification sent successfully!
        '404':
          description: User not found!
        '400':
          description: Something went wrong.
  /notifications/{notificationid}:
    get:
      description: Retrieve the details of a notification. 
      tags: 
        - Notification Service
      parameters:
      - in: path
        name: notificationid
        required: true
        schema:
          type: integer
          example: 789
      responses:
        '200':
          description: Successfully retrieved details,
          content:
            application/json:
              schema:
                $ref: '#/definitions/Notification'
  /users/{userid}/notifications:
    get:
      description: Retrieve a list of all notifications for a user.
      tags:
        - Notification Service
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Notification list successfully returned!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/Notification'
        '404':
          description: Error! User not found!
        '400':
          description: Something went wrong.
  /auctions/{auctionid}:
    get:
      tags:
        - Auction Service
      description: Get auction info by id.
      parameters:
      - in: path
        name: auctionId
        required: true
        schema:
          type: integer
          format: int64
          example: 1200
      responses:
        '200':
          description: Successfully retrieved auction info!
          content:
            application/json:
              schema:
                $ref: '#/definitions/Auction'
        '404':
          description: Error! Auction not found!
        '400':
          description: Something went wrong.
    put:
      tags:
        - Auction Service
      description: Create a new auction with the specified id
      parameters:
        - in: path
          name: auctionid
          required: true
          description: The ID of the auction to create.
          schema:
            type: integer
            example: 2934
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Auction'
      responses:
        '201':
          description: Auction created successfully!
        '400':
          description: Error! Auction not created!
  /items/{id}:
    get:
      tags:
        - Item Management
      description: Gets an item by the item id
      parameters:
        - in: path
          name: itemId
          required: true
          description: Id of the item
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sucessfully retrieved item!
          content:
            application/json:
              schema:
                $ref: '#/definitions/Item'
        '404':
          description: Item not found!
        '400':
          description: Something went wrong.
    put:
      tags:
        - Item Management
      description: Create a new item with the specified Id
      parameters:
        - in: path
          name: itemId
          required: true
          description: Id of the new imte
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Item'
    delete:
      tags:
        - Item Management
    

definitions:
  User:
    type: object
    properties:
     e-mail:
       type: string
       example: "anavicente1979@mail.com"
     first_name:
       type: string
       example: "Ana"
     last_name:
       type: string
       example: "Vicente"
     birth_date:
       type: string
       example: "12-05-1979"
     zipcode:
       type: string
       example: 2665
     address:
       type: string
       example: "Rua das Flores, nº5"
     username:
       type: string
       example: "avicente1979"
     payment_info:
       type: string
       example: "4066 8673 2345 7610"
  Credentials:
    type: object
    properties:
      email:
        type: string
      userID:
        type: integer
        format: int64
      password:
        type: string
  PaymentDetails:
    type: object
    properties:
      amount:
        type: number
        format: float
        description: The amount to be paid.
        example: 130.5
      payment_info:
        type: string
        description: The payment information to be used.
        example: "4066 8673 2345 7610"
      date:
        type: string
        description: Date of transaction.
        example: "15-03-2023/16h14m39s"
  Notification:
    type: object
    properties:
      id:
        type: integer
        format: int64
      message:
        type: string
        description: The message to be sent to the user.
        example: "Hello {userid}. Someone placed a bid on your auction"
      subject:
        type: string
        description: The subject of the notification.
        example: "Someone placed a bid on your auction"
      date:
        type: string
        example: '15-03-2023/16h15m39s'
  Auction:
    type: object
    properties:
      itemid:
        type: integer
        format: int64
      auctionid:
        type: integer
        example: 1200
      name:
        type: string
        example: "Auction Tittle"
      description:
        type: string
        example: "This is the auction's description"
      start_time:
        type: string
        example: "15-03-2023/16h15m39s"
      end_time:
        type: string
        example: "15-04-2023/16h15m39s"
      current_bid:
        type: number
        format: float
        example: 150.0
      startingbid:
        type: number
        format: float
        example: 150
      status:
        type: string
        example: "active"
  Item:
    type: object
    properties:
      itemId:
        type: integer
        format: int64
      itemName:
        type: String
      SellerId:
        type: integer
        format: int64
      Area:
        type: string
      Category:
        type: string
      Description:
        type: string
  ShippingOrder:
    type: object
    properties:
      shippingNumber:
        type: integer
        format: int64
      itemId:
        type: integer
        format: int64
      Address:
        type: string
      buyerId:
        type: integer
        format: int64
      sellerId:
        type: integer
        format: int64