openapi: 3.0.3

info:
  title: Ebay Killer App 1.0
  description: |
    This is a project made for the Web Applications course, with the intention of creating an Ebay killer app.
    
    Authors are Luís Ferreirinha (51127) and Nélio Pereira (60550), of Group 30.
  
  termsOfService: http://ebaykiller.com/terms/
  
  contact:
      name:
        Ebay Killer App Support
      email: 
        ebaykiller@mail.com
  
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

servers:
  - url: https://ebaykiller.com/api/v3

tags:
  - name: User Management
    description: Manage user account and details
  - name: Authentication Service
    description: Authenticate users and reset password
  - name: Payment Service
    description: Process payments
  - name: Notification Service
    description: Send notifications to a user
  - name: Auction Service
    description: Manage auctions
  - name: Item Management
    description: Manage items available for auction
  - name: Search Service
    description: Peform searches according to user queries and return results
  - name: Analytics Service
    description: Calculate analytics based on user info
  - name: Recommendation Service
    description: Perform recommendations based on user info
  - name: Shipping Service
    description: Manage shipping orders for items sold in auctions


paths:
  /users:
      description: Manage Users
      get:
        tags:
          - User Management
        description: Retrieve a list with all the users
        operationId: getAllUsers
        responses:
          '200':
            description: Success Response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '400':
              description: Something went found
          '404':
              description: No users found
      post:
        tags:
          - User Management
        description: Create a new user
        operationId: createNewUser
        parameters:
          - name: userID
            in: header
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          '201':
            description: User successfully created!
          '400':
            description: Something went wrong, please try again.
  /users/{userid}:
    description: Get user based on path parameter
    get:
      tags:
        - User Management
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Couldn't find userID
    put:
      tags:
        - User Management
      description: Update user's details
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User details updated successfully!
        '404':
          description: Error! User not found!
        '400':
          description: Something went wrong
    delete:
      tags:
        - User Management
      description: Delete a user specified by the Id
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User successfully deleted!
        '404':
          description: User not found!
        '400':
          description: Something went wrong :(
  /auth/login:
    post:
      tags:
        - Authentication Service
      description: Authenticate the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Successfully logged in!
        '400':
          description: Authentication failed!
        '404':
          description: No user with that id!
  /auth/logout:
    post:
      tags:
        - Authentication Service
      description: Logout the user
      parameters:
        - name: userID
          in: header
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Logged out successfully!
        '400':
          description: Logout failed.
        '404':
          description: Couldn't logout that user!
  /auth/resetpassword:
    post:
      tags:
        - Authentication Service
      description: Reset a user's password by sending a password reset link to the user's e-mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Password reset e-mail sent!
        '404':
          description: Invalid e-mail address provided!
        '400':
          description: Something bad happened!
  /payment/auction/{id}:
    put:
      tags:
        - Payment Service
      description: Submit payment for a specific auction.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 140
      requestBody:
        description: Payment details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDetails' 
      responses:
        '200':
          description: Payment submitted successfully.
        '400':
          description: Invalid input.
        '404':
          description: Auction not found.
  /payment/{id}:
    get:
      tags:
        - Payment Service
      description: Retrieve the details of a payment by payment id.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
        '404':
          description: Payment not found.
        '400':
          description: Something went wrong.
  /payments:
    get:
      tags: 
        - Payment Service
      description: Retrieve a list of all payments.
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentDetails'
  /notifications/{userid}:
    put:
      description: Send a notification to a user.
      tags:
        - Notification Service
      parameters:
        - in: path
          name: userid
          required: true
          description: The ID of the user to send the notification to.
          schema:
            type: integer
            format: int64
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Notification sent successfully!
        '404':
          description: User not found!
        '400':
          description: Something went wrong.
  /notifications/{notificationid}:
    get:
      description: Retrieve the details of a notification. 
      tags: 
        - Notification Service
      parameters:
      - in: path
        name: notificationid
        required: true
        schema:
          type: integer
          example: 789
      responses:
        '200':
          description: Successfully retrieved details,
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  /users/{userid}/notifications:
    get:
      description: Retrieve a list of all notifications for a user.
      tags:
        - Notification Service
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Notification list successfully returned!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: Error! User not found!
        '400':
          description: Something went wrong.
  /auctions:
    get:
      tags:
        - Auction Service
      description: Get list of all auctions
      responses:
        '200':
          description: Successfully retrieved all auctions!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref : '#/components/schemas/Auction'
        '400':
          description: Couldn't retrieve list of auctions
        '404':
          description: No auctions found
    post:
      tags:
        - Auction Service
      description: Create a new auction
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
      responses:
        '201':
          description: Sucessfully created a new auction
        '400':
          description: Error! Auction not created!
  /auctions/{auctionid}:
    get:
      tags:
        - Auction Service
      description: Get auction info by id.
      parameters:
      - in: path
        name: auctionid
        required: true
        schema:
          type: integer
          format: int64
          example: 1200
      responses:
        '200':
          description: Successfully retrieved auction info!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
        '404':
          description: Error! Auction not found!
        '400':
          description: Something went wrong.
    put:
      tags:
        - Auction Service
      description: Update an auction with the specified id
      parameters:
        - in: path
          name: auctionid
          required: true
          description: The ID of the auction to create.
          schema:
            type: integer
            example: 2934
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
      responses:
        '201':
          description: Auction updated successfully!
        '400':
          description: Error! Auction not created!
  /auctions/{id}/bids:
    get:
      tags:
        - Auction Service
      description: Get list of all bids placed on a action
      parameters:
        - in: path
          name: id
          required: true
          description: Auction id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Bidding history sucessfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'
        '404':
          description: No bidding history found for this auction
        '400':
          description: Something went wrong
    post:
      tags:
        - Auction Service
      description: Place a bid on an auction
      parameters:
        - in: path
          name: id
          required: true
          description: Auction id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bid'
      responses:
        '201':
          description: Bid placed sucessfully!
        '400':
          description: Error! Couldn't place bid! Maybe you were outbid?
        '404':
          description: The auction you're trying to place a bid doesn't exist.
  /auctions/{id}/bids/{id}:
    get:
      tags:
        - Auction Service
      description: Get information about a placed bid
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the bid
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Bid information sucessfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'
        '400':
          description: Something went wrong.
        '404':
          description: No bid with that id was found.
    delete:
      tags:
        - Auction Service
      description: Delete a previously placed bid
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the bid.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Bid sucessfully removed.
        '400':
          description: Error! Couldn't remove bid.
        '404':
          description: Error! Couldn't find a bid with that id.
  /items:
    get:
      tags:
        - Item Management
      description: Get list of all available items
      responses:
        '200':
          description: Successfully retrieved all items!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref : '#/components/schemas/Item'
        '400':
          description: Couldn't retrieve list of items
        '404':
          description: No items found
    post:
      tags:
        - Item Management
      description: Create a new item
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Sucessfully created a new auction
        '400':
          description: Error! Auction not created!
  /items/{id}:
    get:
      tags:
        - Item Management
      description: Gets an item by the item id
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the item
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sucessfully retrieved item!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found!
        '400':
          description: Something went wrong.
    put:
      tags:
        - Item Management
      description: Update an item with the specified Id
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the new imte
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Sucessfully updated the item!
        '404':
          description: Item not found!
        '400':
          description: Something went wrong.
    delete:
      tags:
        - Item Management
      description: Delete an item
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the item.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Item sucessfully deleted.
        '400':
          description: Error! Couldn't remove item.
        '404':
          description: Error! Couldn't find a item with that id.
  /items/{id}/images:
    get:
      tags:
        - Item Management
      description: Gets all images attached to an item
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the item
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sucessfully retrieved all images!
          content:
            image/*:     # Media type
             schema: 
               type: array
               items:
                type: string
                format: binary
        '404':
          description: Item not found!
        '400':
          description: Something went wrong.
    post:
      tags:
        - Item Management
      description: Attach an image to an item
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the item
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
            image/*:     # Media type
             schema: 
              type: string
              format: binary
      responses:
        '201':
          description: Sucessfully attached an image to the item!
        '404':
          description: Item not found!
        '400':
          description: Something went wrong.
  /items/{id}/images/{imageid}:
    get:
      tags:
        - Item Management
      description: Get an items image by its id
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the item
          schema:
            type: integer
            format: int64
        - in: path
          name: imageid
          required: true
          description: Id of the image
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sucessfully retrieved image!
          content:
            image/*:     # Media type
             schema: 
              type: string
              format: binary
        '404':
          description: Item or image not found!
        '400':
          description: Something went wrong.
    delete:
      tags:
        - Item Management
      description: Delete an items image by its id
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the item
          schema:
            type: integer
            format: int64
        - in: path
          name: imageid
          required: true
          description: Id of the image
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sucessfully deleted image!
        '404':
          description: Item or image not found!
        '400':
          description: Something went wrong.
  /search:
    post:
      tags:
        - Search Service
      description: Search for an item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/SearchQuery'
      responses:
        '201':
          description: Success! Retrieved a list of auctions that match the filters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'
        '404':
          description: Found no auctions that match the given filters.
        '400':
          description: Error! Couldn't perform search.
  /analytics:
    post:
      tags:
        - Analytics Service
      description: Create analytics for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAnalytics'
      responses:
        '201':
          description: Success! Calculated new analytics
        '400':
          description: Error! Couldn't calculate any analytics for this user.
  /analytics/{userId}:
    get:
      tags:
        - Analytics Service
      description: Retrieve user analytics
      parameters:
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success! Retrieved analytics for this user.
        '404':
          description: Error! Couldn't find this user.
        '400':
          description: Error! Couldn't retrieve analytics.
    put:
      tags:
        - Analytics Service
      description: Update a users analytics
      parameters:
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAnalytics'
      responses:
        '201':
          description: Success! Updated analytics for this user.
        '404':
          description: Error! Couldn't find this user.
        '400':
          description: Error! Couldn't update analytics.
      
  /users/{userId}/recomendations:
    get:
      tags:
        - Recommendation Service
      description: Get a list of all recomendations for a certain user by its ID
      parameters:
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success! Retrieved a list of recommendations.
          content:
            applications/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'
        '404':
          description: Error! Couldn't find the user.
        '400':
          description: Error! Something went wrong.
    post:
      tags:
        - Recommendation Service
      description: Create a recomendation for this user
      parameters:
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
      responses:
        '201':
          description: Success! Created a new recommendation.
        '404':
          description: Error! Couldn't find that user.
        '400':
          description: Error! Couldn't create recommendation.
  /users/{userId}/recomendations/{id}:
    get:
      tags:
        - Recommendation Service
      description: Get a list of all recomendations for a certain user by its ID
      parameters:
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
            format: int64
        - in: path
          name: id
          required: true
          description: Recomendation ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success! Retrieved a specific auction recomendation.
          content:
            applications/json:
              schema:
                $ref: '#/components/schemas/Auction'
        '404':
          description: Error! Couldn't find the user or the recomendation.
        '400':
          description: Error! Something went wrong.
  
    
components:
  schemas:
    User:
      type: object
      properties:
       e-mail:
         type: string
         example: "anavicente1979@mail.com"
       first_name:
         type: string
         example: "Ana"
       last_name:
         type: string
         example: "Vicente"
       birth_date:
         type: string
         example: "12-05-1979"
       zipcode:
         type: string
         example: 2665
       address:
         type: string
         example: "Rua das Flores, nº5"
       username:
         type: string
         example: "avicente1979"
       payment_info:
         type: string
         example: "4066 8673 2345 7610"
    Credentials:
      type: object
      properties:
        email:
          type: string
        userID:
          type: integer
          format: int64
        password:
          type: string
    PaymentDetails:
      type: object
      properties:
        amount:
          type: number
          format: float
          description: The amount to be paid.
          example: 130.5
        payment_info:
          type: string
          description: The payment information to be used.
          example: "4066 8673 2345 7610"
        date:
          type: string
          description: Date of transaction.
          example: "15-03-2023/16h14m39s"
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        message:
          type: string
          description: The message to be sent to the user.
          example: "Hello {userid}. Someone placed a bid on your auction"
        subject:
          type: string
          description: The subject of the notification.
          example: "Someone placed a bid on your auction"
        date:
          type: string
          example: '15-03-2023/16h15m39s'
    Auction:
      type: object
      properties:
        itemid:
          type: integer
          format: int64
        auctionid:
          type: integer
          example: 1200
        name:
          type: string
          example: "Auction Tittle"
        description:
          type: string
          example: "This is the auction's description"
        start_time:
          type: string
          example: "15-03-2023/16h15m39s"
        end_time:
          type: string
          example: "15-04-2023/16h15m39s"
        current_bid:
          type: number
          format: float
          example: 150.0
        startingbid:
          type: number
          format: float
          example: 150
        status:
          type: string
          example: "active"
    Item:
      type: object
      properties:
        itemId:
          type: integer
          format: int64
        itemName:
          type: string
        SellerId:
          type: integer
          format: int64
        Area:
          type: string
        Category:
          type: string
        Description:
          type: string
    ShippingOrder:
      type: object
      properties:
        shippingNumber:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        Address:
          type: string
        buyerId:
          type: integer
          format: int64
        sellerId:
          type: integer
          format: int64
        paymentId:
          type: integer
          format: int64
    Bid:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userid:
          type: integer
          format: int64
        auctionId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        bidValue:
          type: number
        timestamp:
          type: string
    SearchQuery:
      type: object
      properties:
        itemName:
          type: string
        category:
          type: string
        area:
          type: string
        auctionStartTime:
          type: string
        auctionEndTime:
          type: string
        sellerName:
          type: string
        currentBid:
          type: number
    UserAnalytics:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        auctionsParticipated:
          type: number
        auctionsWon:
          type: number
        auctionsStarted:
          type: number
        totalBids:
          type: number
        timesOutbid:
          type: number